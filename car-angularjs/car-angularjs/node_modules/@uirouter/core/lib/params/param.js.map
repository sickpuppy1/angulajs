{
  "version": 3,
  "file": "param.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter\\core\\params\\param.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { extend, filter, map, allTrueR, find } from '../common/common';\r\nimport { prop } from '../common/hof';\r\nimport { isInjectable, isDefined, isString, isArray, isUndefined } from '../common/predicates';\r\nimport { RawParams, ParamDeclaration } from '../params/interface';\r\nimport { services } from '../common/coreservices';\r\nimport { ParamType } from './paramType';\r\nimport { ParamTypes } from './paramTypes';\r\nimport { StateDeclaration } from '../state';\r\nimport { UrlConfig } from '../url';\r\n\r\nconst hasOwn = Object.prototype.hasOwnProperty;\r\n\r\nconst isShorthand = (cfg: ParamDeclaration) =>\r\n  ['value', 'type', 'squash', 'array', 'dynamic'].filter(hasOwn.bind(cfg || {})).length === 0;\r\n\r\nenum DefType {\r\n  PATH,\r\n  SEARCH,\r\n  CONFIG,\r\n}\r\nexport { DefType };\r\n\r\nfunction getParamDeclaration(paramName: string, location: DefType, state: StateDeclaration): ParamDeclaration {\r\n  const noReloadOnSearch = (state.reloadOnSearch === false && location === DefType.SEARCH) || undefined;\r\n  const dynamic = find([state.dynamic, noReloadOnSearch], isDefined);\r\n  const defaultConfig = isDefined(dynamic) ? { dynamic } : {};\r\n  const paramConfig = unwrapShorthand(state && state.params && state.params[paramName]);\r\n  return extend(defaultConfig, paramConfig);\r\n}\r\n\r\nfunction unwrapShorthand(cfg: ParamDeclaration): ParamDeclaration {\r\n  cfg = isShorthand(cfg) ? ({ value: cfg } as ParamDeclaration) : cfg;\r\n\r\n  getStaticDefaultValue['__cacheable'] = true;\r\n  function getStaticDefaultValue() {\r\n    return cfg.value;\r\n  }\r\n\r\n  const $$fn = isInjectable(cfg.value) ? cfg.value : getStaticDefaultValue;\r\n  return extend(cfg, { $$fn });\r\n}\r\n\r\nfunction getType(cfg: ParamDeclaration, urlType: ParamType, location: DefType, id: string, paramTypes: ParamTypes) {\r\n  if (cfg.type && urlType && urlType.name !== 'string') throw new Error(`Param '${id}' has two type configurations.`);\r\n  if (cfg.type && urlType && urlType.name === 'string' && paramTypes.type(cfg.type as string))\r\n    return paramTypes.type(cfg.type as string);\r\n  if (urlType) return urlType;\r\n  if (!cfg.type) {\r\n    const type =\r\n      location === DefType.CONFIG\r\n        ? 'any'\r\n        : location === DefType.PATH\r\n        ? 'path'\r\n        : location === DefType.SEARCH\r\n        ? 'query'\r\n        : 'string';\r\n    return paramTypes.type(type);\r\n  }\r\n  return cfg.type instanceof ParamType ? cfg.type : paramTypes.type(cfg.type as string);\r\n}\r\n\r\n/** returns false, true, or the squash value to indicate the \"default parameter url squash policy\". */\r\nfunction getSquashPolicy(config: ParamDeclaration, isOptional: boolean, defaultPolicy: boolean | string) {\r\n  const squash = config.squash;\r\n  if (!isOptional || squash === false) return false;\r\n  if (!isDefined(squash) || squash == null) return defaultPolicy;\r\n  if (squash === true || isString(squash)) return squash;\r\n  throw new Error(`Invalid squash policy: '${squash}'. Valid policies: false, true, or arbitrary string`);\r\n}\r\n\r\nfunction getReplace(config: ParamDeclaration, arrayMode: boolean, isOptional: boolean, squash: string | boolean) {\r\n  const defaultPolicy = [\r\n    { from: '', to: isOptional || arrayMode ? undefined : '' },\r\n    { from: null, to: isOptional || arrayMode ? undefined : '' },\r\n  ];\r\n\r\n  const replace = isArray(config.replace) ? config.replace : [];\r\n  if (isString(squash)) replace.push({ from: squash, to: undefined });\r\n\r\n  const configuredKeys = map(replace, prop('from'));\r\n  return filter(defaultPolicy, (item) => configuredKeys.indexOf(item.from) === -1).concat(replace);\r\n}\r\n\r\nexport class Param {\r\n  id: string;\r\n  type: ParamType;\r\n  location: DefType;\r\n  isOptional: boolean;\r\n  dynamic: boolean;\r\n  raw: boolean;\r\n  squash: boolean | string;\r\n  replace: [{ to: any; from: any }];\r\n  inherit: boolean;\r\n  array: boolean;\r\n  config: any;\r\n  /** Cache the default value if it is a static value */\r\n  _defaultValueCache: {\r\n    defaultValue: any;\r\n  };\r\n\r\n  static values(params: Param[], values: RawParams = {}): RawParams {\r\n    const paramValues = {} as RawParams;\r\n    for (const param of params) {\r\n      paramValues[param.id] = param.value(values[param.id]);\r\n    }\r\n    return paramValues;\r\n  }\r\n\r\n  /**\r\n   * Finds [[Param]] objects which have different param values\r\n   *\r\n   * Filters a list of [[Param]] objects to only those whose parameter values differ in two param value objects\r\n   *\r\n   * @param params: The list of Param objects to filter\r\n   * @param values1: The first set of parameter values\r\n   * @param values2: the second set of parameter values\r\n   *\r\n   * @returns any Param objects whose values were different between values1 and values2\r\n   */\r\n  static changed(params: Param[], values1: RawParams = {}, values2: RawParams = {}): Param[] {\r\n    return params.filter((param) => !param.type.equals(values1[param.id], values2[param.id]));\r\n  }\r\n\r\n  /**\r\n   * Checks if two param value objects are equal (for a set of [[Param]] objects)\r\n   *\r\n   * @param params The list of [[Param]] objects to check\r\n   * @param values1 The first set of param values\r\n   * @param values2 The second set of param values\r\n   *\r\n   * @returns true if the param values in values1 and values2 are equal\r\n   */\r\n  static equals(params: Param[], values1 = {}, values2 = {}): boolean {\r\n    return Param.changed(params, values1, values2).length === 0;\r\n  }\r\n\r\n  /** Returns true if a the parameter values are valid, according to the Param definitions */\r\n  static validates(params: Param[], values: RawParams = {}): boolean {\r\n    return params.map((param) => param.validates(values[param.id])).reduce(allTrueR, true);\r\n  }\r\n\r\n  constructor(id: string, type: ParamType, location: DefType, urlConfig: UrlConfig, state: StateDeclaration) {\r\n    const config: ParamDeclaration = getParamDeclaration(id, location, state);\r\n    type = getType(config, type, location, id, urlConfig.paramTypes);\r\n    const arrayMode = getArrayMode();\r\n    type = arrayMode ? type.$asArray(arrayMode, location === DefType.SEARCH) : type;\r\n    const isOptional = config.value !== undefined || location === DefType.SEARCH;\r\n    const dynamic = isDefined(config.dynamic) ? !!config.dynamic : !!type.dynamic;\r\n    const raw = isDefined(config.raw) ? !!config.raw : !!type.raw;\r\n    const squash = getSquashPolicy(config, isOptional, urlConfig.defaultSquashPolicy());\r\n    const replace = getReplace(config, arrayMode, isOptional, squash);\r\n    const inherit = isDefined(config.inherit) ? !!config.inherit : !!type.inherit;\r\n\r\n    // array config: param name (param[]) overrides default settings.  explicit config overrides param name.\r\n    function getArrayMode() {\r\n      const arrayDefaults = { array: location === DefType.SEARCH ? 'auto' : false };\r\n      const arrayParamNomenclature = id.match(/\\[\\]$/) ? { array: true } : {};\r\n      return extend(arrayDefaults, arrayParamNomenclature, config).array;\r\n    }\r\n\r\n    extend(this, { id, type, location, isOptional, dynamic, raw, squash, replace, inherit, array: arrayMode, config });\r\n  }\r\n\r\n  isDefaultValue(value: any): boolean {\r\n    return this.isOptional && this.type.equals(this.value(), value);\r\n  }\r\n\r\n  /**\r\n   * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the\r\n   * default value, which may be the result of an injectable function.\r\n   */\r\n  value(value?: any): any {\r\n    /**\r\n     * [Internal] Get the default value of a parameter, which may be an injectable function.\r\n     */\r\n    const getDefaultValue = () => {\r\n      if (this._defaultValueCache) return this._defaultValueCache.defaultValue;\r\n\r\n      if (!services.$injector) throw new Error('Injectable functions cannot be called at configuration time');\r\n\r\n      const defaultValue = services.$injector.invoke(this.config.$$fn);\r\n\r\n      if (defaultValue !== null && defaultValue !== undefined && !this.type.is(defaultValue))\r\n        throw new Error(\r\n          `Default value (${defaultValue}) for parameter '${this.id}' is not an instance of ParamType (${this.type.name})`\r\n        );\r\n\r\n      if (this.config.$$fn['__cacheable']) {\r\n        this._defaultValueCache = { defaultValue };\r\n      }\r\n\r\n      return defaultValue;\r\n    };\r\n\r\n    const replaceSpecialValues = (val: any) => {\r\n      for (const tuple of this.replace) {\r\n        if (tuple.from === val) return tuple.to;\r\n      }\r\n      return val;\r\n    };\r\n\r\n    value = replaceSpecialValues(value);\r\n\r\n    return isUndefined(value) ? getDefaultValue() : this.type.$normalize(value);\r\n  }\r\n\r\n  isSearch(): boolean {\r\n    return this.location === DefType.SEARCH;\r\n  }\r\n\r\n  validates(value: any): boolean {\r\n    // There was no parameter value, but the param is optional\r\n    if ((isUndefined(value) || value === null) && this.isOptional) return true;\r\n\r\n    // The value was not of the correct ParamType, and could not be decoded to the correct ParamType\r\n    const normalized = this.type.$normalize(value);\r\n    if (!this.type.is(normalized)) return false;\r\n\r\n    // The value was of the correct type, but when encoded, did not match the ParamType's regexp\r\n    const encoded = this.type.encode(normalized);\r\n    return !(isString(encoded) && !this.type.pattern.exec(<string>encoded));\r\n  }\r\n\r\n  toString() {\r\n    return `{Param:${this.id} ${this.type} squash: '${this.squash}' optional: ${this.isOptional}}`;\r\n  }\r\n}\r\n"
  ]
}